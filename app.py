import streamlit as st
import numpy as np
import joblib
import os

# Load the trained model and scaler
model = joblib.load('risk_model.pkl')
scaler = joblib.load('scaler.pkl')

# Assign weights to each feature
weights = {
    'out_of_school': 1.5,
    'ever_had_sex': 2.0,
    'is_head': 1.0,
    'undergone_gbv_last_12mnths': 2.0,
    'sexual_partners_last_12mnths': 1.5,
    'received_gifts_for_sex': 1.5,
    'ever_had_sti': 2.0,
    'no_condom_use': 1.5,
    'is_orphan': 1.0,
    'has_child': 2.0,
    'used_drugs_last_12mnths': 2.5
}

# Function to calculate the weighted score
def calculate_weighted_score(input_data, weights):
    score = sum(input_data[feature] * weight for feature, weight in weights.items())
    return score

# Function to assign risk levels
def assign_risk_level(score):
    if score >= 10:
        return 'High Risk'
    elif 5 <= score < 10:
        return 'Medium Risk'
    else:
        return 'Low Risk'

def main():
    # Streamlit UI
    st.title("DREAMS Program Risk Scoring")

    # User input fields
    out_of_school = st.selectbox("Out of School", [0, 1])
    ever_had_sex = st.selectbox("Ever Had Sex", [0, 1])
    is_head = st.selectbox("Is Head of Household", [0, 1])
    undergone_gbv_last_12mnths = st.selectbox("Undergone GBV in Last 12 Months", [0, 1])
    sexual_partners_last_12mnths = st.selectbox("Number of Sexual Partners in Last 12 Months", [0, 1])
    received_gifts_for_sex = st.selectbox("Received Gifts for Sex", [0, 1])
    ever_had_sti = st.selectbox("Ever Had an STI", [0, 1])
    no_condom_use = st.selectbox("No Condom Use", [0, 1])
    is_orphan = st.selectbox("Is Orphan", [0, 1])
    has_child = st.selectbox("Has a Child", [0, 1])
    used_drugs_last_12mnths = st.selectbox("Used Drugs in Last 12 Months", [0, 1])

    # Prepare the input data
    input_data = {
        'out_of_school': out_of_school,
        'ever_had_sex': ever_had_sex,
        'is_head': is_head,
        'undergone_gbv_last_12mnths': undergone_gbv_last_12mnths,
        'sexual_partners_last_12mnths': sexual_partners_last_12mnths,
        'received_gifts_for_sex': received_gifts_for_sex,
        'ever_had_sti': ever_had_sti,
        'no_condom_use': no_condom_use,
        'is_orphan': is_orphan,
        'has_child': has_child,
        'used_drugs_last_12mnths': used_drugs_last_12mnths
    }

    # Calculate the weighted score
    weighted_score = calculate_weighted_score(input_data, weights)

    # Predict risk level using the model
    input_values = np.array(list(input_data.values())).reshape(1, -1)
    input_values_scaled = scaler.transform(input_values)
    predicted_score = model.predict(input_values_scaled)[0]

    # Classify the risk level based on the weighted score
    risk_level = assign_risk_level(weighted_score)

    # Display results
    st.write(f"Calculated Weighted Score: {weighted_score}")
    st.write(f"Predicted Risk Level: {risk_level}")
    st.write(f"Predicted Score by Model: {predicted_score}")

if __name__ == "__main__":
    os.system("streamlit run app.py --server.port 8080")
