import streamlit as st
import pandas as pd
import pickle
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer

# Load the model components
with open('risk_model_components.pkl', 'rb') as f:
    risk_model_components = pickle.load(f)

scaler = risk_model_components['scaler']
pca = risk_model_components['pca']
kmeans = risk_model_components['kmeans']

# Define a custom transformer to calculate risk scores
weights = abs(pca.components_[0])
def calculate_risk_score(X, weights):
    return X.dot(weights)

risk_scorer = FunctionTransformer(calculate_risk_score, kw_args={'weights': weights})

# Function to process input data
def process_input_data(input_data):
    # Replace 'Yes'/'No' with binary values and ensure no None values
    input_data_binary = input_data.replace({'Yes': 1, 'No': 0}).fillna(0)

    # Create a pipeline object
    loaded_pipeline = Pipeline([
        ('scaler', scaler),
        ('pca', pca),
        ('scorer', risk_scorer),
        ('kmeans', kmeans)
    ])

    # Predict risk scores and cluster assignments
    input_data_binary['risk_score'] = loaded_pipeline.named_steps['scorer'].transform(input_data_binary.values).flatten()

    # Handle non-zero risk scores for clustering
    input_data_binary['risk_category'] = input_data_binary['risk_score'].apply(lambda score: 'Not Vulnerable' if score == 0 else 'TBD')

    non_zero_risk = input_data_binary[input_data_binary['risk_score'] > 0]
    if not non_zero_risk.empty:
        non_zero_risk['risk_cluster'] = loaded_pipeline.named_steps['kmeans'].predict(non_zero_risk[['risk_score']])

        # Map clusters to risk categories
        risk_mapping = {0: 'Low Risk', 1: 'Medium Risk', 2: 'High Risk'}
        non_zero_risk['risk_category'] = non_zero_risk['risk_cluster'].map(risk_mapping)

        # Update original dataframe with categorized risks
        input_data_binary.update(non_zero_risk[['risk_category']])

    return input_data_binary

# Streamlit app layout
def main():
    st.title("Risk Assessment for AGYW")

    st.write("Please provide the inputs to calculate the risk score and category:")

    # Get age input
    age_category = st.selectbox("Select AGYW Age Category", ["10-14", "15-19", "20-24"])

    # Initialize variables as None
    sexual_partners_last_12mnths = None
    received_gifts_for_sex = None
    ever_had_sti = None
    no_condom_use = None
    is_orphan = None
    ever_had_sex = None
    has_child = None

    # Components based on age category
    if age_category == "10-14":
        out_of_school = st.selectbox("Out of School", ["Select an option", "Yes", "No"])
        ever_had_sex = st.selectbox("Ever had sex", ["Select an option", "Yes", "No"])
        is_head = st.selectbox("Is the head of the household or in a child headed household?", ["Select an option", "Yes", "No"])
        undergone_gbv_last_12mnths = st.selectbox("Undergoing violence or has undergone violence in the last 12 Months? (Physical, Emotional, Sexual, Social-economic Violence)", ["Select an option", "Yes", "No"])
        has_child = st.selectbox("Has a child of her own/is pregnant/has been pregnant?", ["Select an option", "Yes", "No"])
        used_drugs_last_12mnths = st.selectbox("Has used alcohol/drugs of abuse or struggled with addiction in the last 12 months?", ["Select an option", "Yes", "No"])
        is_orphan = st.selectbox("Is an orphan (partial or Total)?", ["Select an option", "Yes", "No"])

    elif age_category == "15-19":
        out_of_school = st.selectbox("Out of School", ["Select an option", "Yes", "No"])
        has_child = st.selectbox("Has a child of her own/is pregnant/has been pregnant?", ["Select an option", "Yes", "No"])
        is_head = st.selectbox("Is the head of the household or in a child headed household?", ["Select an option", "Yes", "No"])
        undergone_gbv_last_12mnths = st.selectbox("Undergoing violence or has undergone violence in the last 12 Months? (Physical, Emotional, Sexual, Social-economic Violence)", ["Select an option", "Yes", "No"])
        sexual_partners_last_12mnths = st.selectbox("Has had more than one sexual partner in the last 12 months?", ["Select an option", "Yes", "No"])
        received_gifts_for_sex = st.selectbox("Has ever received money gifts or favors in exchange for sex?", ["Select an option", "Yes", "No"])
        ever_had_sti = st.selectbox("Have been diagnosed or treated for STI?", ["Select an option", "Yes", "No"])
        no_condom_use = st.selectbox("No or irregular condom use?", ["Select an option", "Yes", "No"])
        used_drugs_last_12mnths = st.selectbox("Has used alcohol/drugs of abuse or struggled with addiction in the last 12 months?", ["Select an option", "Yes", "No"])

    elif age_category == "20-24":
        out_of_school = st.selectbox("Out of School", ["Select an option", "Yes", "No"])
        sexual_partners_last_12mnths = st.selectbox("Has had more than one sexual partner in the last 12 months?", ["Select an option", "Yes", "No"])
        received_gifts_for_sex = st.selectbox("Has ever received money gifts or favors in exchange for sex?", ["Select an option", "Yes", "No"])
        undergone_gbv_last_12mnths = st.selectbox("Undergoing violence or has undergone violence in the last 12 Months? (Physical, Emotional, Sexual, Social-economic Violence)", ["Select an option", "Yes", "No"])
        is_head = st.selectbox("Is the head of the household or in a child headed household?", ["Select an option", "Yes", "No"])
        ever_had_sti = st.selectbox("Have been diagnosed or treated for STI?", ["Select an option", "Yes", "No"])
        no_condom_use = st.selectbox("No or irregular condom use with a non-marital /non-cohabiting partner?", ["Select an option", "Yes", "No"])
        used_drugs_last_12mnths = st.selectbox("Has used alcohol/drugs of abuse or struggled with addiction in the last 12 months?", ["Select an option", "Yes", "No"])

    # Check if all required fields are filled out
    required_fields = [
        out_of_school, ever_had_sex, is_head, undergone_gbv_last_12mnths,
        sexual_partners_last_12mnths, received_gifts_for_sex, ever_had_sti, 
        no_condom_use, is_orphan, has_child, used_drugs_last_12mnths
    ]

    # Filter out any None values (for fields not applicable to certain age groups)
    filled_fields = [field for field in required_fields if field is not None]

    if any(field == "Select an option" for field in filled_fields):
        st.error("Please fill out all required fields.")
    else:
        # Make prediction when button is clicked
        if st.button("Check Risk Category"):
            input_data = pd.DataFrame({
                'out_of_school': [out_of_school],
                'ever_had_sex': [ever_had_sex] if ever_had_sex is not None else 0,
                'is_head': [is_head],
                'undergone_gbv_last_12mnths': [undergone_gbv_last_12mnths],
                'sexual_partners_last_12mnths': [sexual_partners_last_12mnths] if sexual_partners_last_12mnths is not None else 0,
                'received_gifts_for_sex': [received_gifts_for_sex] if received_gifts_for_sex is not None else 0,
                'ever_had_sti': [ever_had_sti] if ever_had_sti is not None else 0,
                'no_condom_use': [no_condom_use] if no_condom_use is not None else 0,
                'is_orphan': [is_orphan] if is_orphan is not None else 0,
                'has_child': [has_child],
                'used_drugs_last_12mnths': [used_drugs_last_12mnths]
            })

            # Process the input data and calculate risk category
            result = process_input_data(input_data)

            # Display the results
            risk_category = result['risk_category'].values[0]
            st.success(f"The AGYW is categorized as: {risk_category}")

            #st.write("Detailed Results:")
           # st.write(result)

if __name__ == "__main__":
    main()
